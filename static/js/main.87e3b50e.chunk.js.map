{"version":3,"sources":["logo.svg","Three/script.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","camera","scene","renderer","controls","plane","THREE","window","require","mouse","raycaster","rollOverMesh","rollOverMaterial","isShiftDown","objects","STLLoader","onDocumentMouseMove","event","preventDefault","set","clientX","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","length","intersect","position","copy","point","add","face","normal","divideScalar","floor","multiplyScalar","addScalar","animate","onDocumentMouseDown","object","remove","splice","indexOf","voxel","material","dimensions","Vector3","brickGeo","Geometry","cubeGeo","BoxGeometry","width","height","depth","cylinderGeo","CylinderGeometry","mergeMesh","Mesh","i","x","j","z","cylinder","setX","setY","base","setZ","castShadow","receiveShadow","mergeVertices","createMesh","MeshStandardMaterial","color","metalness","roughness","scale","console","log","push","onWindowResize","aspect","updateProjectionMatrix","setSize","onDocumentKeyDown","keyCode","visible","onDocumentKeyUp","update","render","App","PerspectiveCamera","lookAt","OrbitControls","Scene","background","Color","rollOverGeo","BoxBufferGeometry","MeshBasicMaterial","opacity","transparent","gridHelper","GridHelper","Raycaster","Vector2","geometry","PlaneBufferGeometry","rotateX","Math","PI","ambientLight","AmbientLight","directionalLight","DirectionalLight","normalize","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","document","querySelector","appendChild","domElement","addEventListener","init","react_default","a","createElement","className","src","process","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87e3b50e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* Edit from three.js interactive voxelpainter example\nhttps://github.com/mrdoob/three.js/blob/master/examples/webgl_interactive_voxelpainter.html */\n\nvar THREE = window.THREE = require('three');\nrequire('three/examples/js/loaders/STLLoader');\nrequire('three/examples/js/controls/OrbitControls');\n\nvar camera, scene, renderer;\nvar controls;\nvar plane;\nvar mouse, raycaster, isShiftDown = false;\n\nvar rollOverMesh, rollOverMaterial;\nvar cubeGeo, cubeMaterial;\nvar objects = [];\nvar loader = new THREE.STLLoader();\n \n\nfunction init() {\n    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.set(500, 800, 1300);\n    camera.lookAt(0,0,0)\n    controls = new THREE.OrbitControls( camera );\n \n    scene = new THREE.Scene();\n    scene.background = new THREE.Color (0xf8f8f8)\n\n    //roll-over helpers\n    var rollOverGeo = new THREE.BoxBufferGeometry( 50, 58, 50 );\n    rollOverMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000, opacity: 0.5, transparent: true } );\n    rollOverMesh = new THREE.Mesh( rollOverGeo, rollOverMaterial );\n    scene.add( rollOverMesh );\n\n\n    //grid\n    var gridHelper = new THREE.GridHelper(1000, 20, \"#a8a8a8\",\"#d0d0d0\");\n    scene.add(gridHelper);\n\n    // raycaster\n    raycaster = new THREE.Raycaster();\n    mouse = new THREE.Vector2();\n    var geometry = new THREE.PlaneBufferGeometry( 1000, 1000 );\n    geometry.rotateX( - Math.PI / 2 );\n    plane = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { visible: false } ) );\n    scene.add( plane );\n    objects.push( plane );\n\n    // lights\n    var ambientLight = new THREE.AmbientLight( 0xf3f0f0);\n    scene.add( ambientLight );\n    var directionalLight = new THREE.DirectionalLight( 0xffffff );\n    directionalLight.position.set( 1, 0.75, 0.5 ).normalize();\n    scene.add( directionalLight );\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.querySelector('.World').appendChild( renderer.domElement );\n    document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n    document.addEventListener( 'mousedown', onDocumentMouseDown, false );\n    document.addEventListener( 'keydown', onDocumentKeyDown, false );\n    document.addEventListener( 'keyup', onDocumentKeyUp, false );\n\n    //listen to window size change\n    window.addEventListener( 'resize', onWindowResize, false ); \n}\n\nfunction onDocumentMouseMove( event ) {\n    event.preventDefault();\n    mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );\n    raycaster.setFromCamera( mouse, camera );\n    var intersects = raycaster.intersectObjects( objects );\n    if ( intersects.length > 0 ) {\n        var intersect = intersects[ 0 ];\n        rollOverMesh.position.copy( intersect.point ).add( intersect.face.normal );\n        rollOverMesh.position.divideScalar( 50 ).floor().multiplyScalar( 50 ).addScalar( 25 );\n    }\n    animate();\n}\n\nfunction onDocumentMouseDown( event ) {\n    event.preventDefault();\n    mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );\n    raycaster.setFromCamera( mouse, camera );\n    var intersects = raycaster.intersectObjects( objects );\n    if (intersects.length > 0) {\n        var intersect = intersects[0];\n        // delete cube\n        if (isShiftDown) {\n            if (intersect.object !== plane) {\n                scene.remove(intersect.object);\n                objects.splice(objects.indexOf(intersect.object), 1);\n            }\n            // create cube\n        } else {\n            // var url = process.env.PUBLIC_URL + '/3003.stl'\n            // loader.load(url, geometry => {\n            //     var material = new THREE.MeshStandardMaterial({\n            //         //\"red\"\n            //           color: \"#ff0000\",\n            //           // specular: CSSToHex(shadeColor(color, -20)),\n            //           // shininess: 5,\n            //           metalness: 0.4,\n            //           roughness: 0.5,\n            //         });\n            //     var voxel = new THREE.Mesh(geometry, material);\n            var material = new THREE.MeshStandardMaterial({\n            //\"red\"\n              color: \"#ff0000\",\n              // specular: CSSToHex(shadeColor(color, -20)),\n              // shininess: 5,\n              metalness: 0.4,\n              roughness: 0.5,\n            });\n            var voxel = createMesh(material)\n            // voxel.rotation.set( -Math.PI / 2 ,0, 0);\n            voxel.scale.set( 3, 3, 3 );\n            voxel.castShadow = true;\n            voxel.receiveShadow = true;\n            voxel.position.copy( intersect.point ).add( intersect.face.normal );\n            voxel.position.divideScalar( 50 ).floor().multiplyScalar( 50 ).addScalar( 25.5 );\n            console.log(voxel.position)\n            scene.add(voxel);\n            objects.push( voxel );\n            \n\n        }\n        animate();\n    }\n}\n\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n}\n \n\nfunction onDocumentKeyDown( event ) {\n    switch ( event.keyCode ) {\n        case 16: isShiftDown = true; \n        rollOverMesh.visible = false;\n        break;\n    }\n}\n\nfunction onDocumentKeyUp( event ) {\n    switch ( event.keyCode ) {\n        case 16: isShiftDown = false; \n        rollOverMesh.visible = true;\n        break;\n    }\n}\n\nfunction animate() {\n    // requestAnimationFrame( animate );\n    controls.update();\n    renderer.render( scene, camera );\n}\n\nfunction createMesh(material) {\n    //defalut: 1*1\n    var base = 17;\n    let width = 17;\n    let height = 20;\n    let depth = 17;\n    let knobSize = 6;\n    var dimensions = new THREE.Vector3(1,1,1);\n    var brickGeo = new THREE.Geometry();\n    var cubeGeo = new THREE.BoxGeometry( width - 0.1, height - 0.1, depth - 0.1 );\n    var cylinderGeo = new THREE.CylinderGeometry( knobSize, knobSize, knobSize, 20);\n    brickGeo.mergeMesh(new THREE.Mesh(cubeGeo));\n\n    for ( var i = 0; i < dimensions.x; i++ ) {\n        for ( var j = 0; j < dimensions.z; j++ ) {\n            //hah\n          var cylinder = new THREE.Mesh(cylinderGeo, material);\n          cylinder.position.setX(base * i - ((dimensions.x - 1) * base / 2));\n          cylinder.position.setY(base / 1.6);  // TODO to be reworked\n          cylinder.position.setZ(base * j - ((dimensions.z - 1) * base / 2));\n\n          cylinder.castShadow = true;\n          cylinder.receiveShadow = true;\n          brickGeo.mergeMesh( cylinder );\n        }\n    }\n    brickGeo.mergeVertices();\n    brickGeo.castShadow = true;\n    brickGeo.receiveShadow = true;\n    var brick = new THREE.Mesh(brickGeo, material)\n    return brick;\n    \n    \n}\n\nexport {init, animate};","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {init,animate} from './Three/script.js'\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tinit();\n\t\tanimate();\n\t}\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Toolbar\">\n          <div className=\"logo\">\n            <img className='logoimg' src={process.env.PUBLIC_URL + '/lego.png'}/>\n          </div>\n          <div className='appName'>| oLo</div>\n        </div>\n        <div className=\"World\"></div>\n        <div className=\"box\">Hey Im here</div> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}